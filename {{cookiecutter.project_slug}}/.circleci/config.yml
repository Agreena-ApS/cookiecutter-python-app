version: 2.1


orbs:
  python: circleci/python@2.1.1


executors:
  docker-publisher:
    docker:
      - image: cimg/python:3.10
    environment:
      IMAGE_NAME: eu.gcr.io/hummingbird-technologies/platform/{{cookiecutter.project_slug}}
    resource_class: small

  tests-runner:
    docker:
      - image: cimg/python:3.11
    resource_class: small


jobs:
  build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker:
          version: "20.10.18"
          docker_layer_caching: true
      - run: docker build --progress=plain -t $IMAGE_NAME:latest .
      - run: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - image.tar
    environment:
      DOCKER_BUILDKIT: 1
      GIT_COMMIT: $CIRCLE_SHA1

  code-qa:
    executor: tests-runner
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: requirements/development.txt
      - run:
          command: black --check .
          name: Run Black code formatting tool
      - run:
          {% if cookiecutter.code_qa == 'pylint' -%}
          command: pylint {{cookiecutter.app_name}}/ tests/ --rcfile=.pylintrc
          name: Run Pylint code QA checks
          {%- elif cookiecutter.code_qa == 'flake8' -%}
          command: flake8 {{cookiecutter.app_name}}/ tests/
          name: Run Flake8 code QA checks
          {%- elif cookiecutter.code_qa == 'ruff' -%}
          command: ruff check .
          name: Run Ruff code QA checks
      {%- endif %}
      - run:
          command: mypy {{cookiecutter.app_name}}/
          name: Run Mypy typing hint checks

  test:
    executor: tests-runner
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: requirements/development.txt
      - run: |
            pytest \
              --verbose \
              --junitxml=test-results/junit.xml \
              --cov=user_management \
              --cov-report=html:coverage-results/coverage.html
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage-results/coverage.html
          destination: coverage-metrics

  push-docker-image:
    executor: docker-publisher
    environment:
      PIPELINE_NUMBER: << pipeline.number >>
    parameters:
      env:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          command: docker load -i /tmp/workspace/image.tar
          name: Load image from workspace
      - run:
          command: |
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$CIRCLE_SHA1
            docker tag $IMAGE_NAME:$CIRCLE_SHA1 $IMAGE_NAME:<< parameters.env >>-$PIPELINE_NUMBER
            docker tag $IMAGE_NAME:$CIRCLE_SHA1 $IMAGE_NAME:<< parameters.env >>
          name: Tag image
      - run:
          command: echo $GSA_KEY | docker login -u _json_key --password-stdin https://eu.gcr.io
          name: Log in to Google Container Registry
      - run:
          command: docker push --all-tags $IMAGE_NAME
          name: Push image


workflows:
  main:
    jobs:
      - build
      - code-qa:
          requires:
            - build
      - test:
          requires:
            - build

      # Staging
      - push-docker-image:
          name: push-docker-image-staging
          env: staging
          requires:
            - code-qa
            - test
          context:
            - gcp-secrets
          filters:
            branches:
              only: {% if cookiecutter.circle_ci_config == "trunk" %}develop{% elif cookiecutter.circle_ci_config == "CI-CD" %}main{% endif %}

      # Production
      - hold:
          type: approval
          requires:
            - code-qa
            - test
          filters:
            branches:
              only: main
      - push-docker-image:
          name: push-docker-image-prod
          env: prod
          requires:
            - hold
          context:
            - gcp-secrets
          filters:
            branches:
              only: main
